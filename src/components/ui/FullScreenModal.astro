---
import type { HTMLAttributes } from 'astro/types'

export interface Props extends HTMLAttributes<'div'> {
  buttonText?: string
  buttonClass?: string
  modalTitle?: string
  showHeader?: boolean
}

const { 
  buttonText = "Open Modal", 
  buttonClass = "",
  modalTitle = "Modal",
  showHeader = true,
  ...rest 
} = Astro.props
---

<div class="fullscreen-modal-wrapper" {...rest}>
  <!-- Trigger Button -->
  <button 
    type="button" 
    class={`modal-trigger-btn ${buttonClass}`}
    aria-haspopup="dialog"
    aria-label={`Open ${modalTitle}`}
  >
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="icon">
      <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/>
      <polyline points="10,17 15,12 10,7"/>
      <line x1="15" x2="3" y1="12" y2="12"/>
    </svg>
    {buttonText}
  </button>

  <!-- Modal Overlay -->
  <div 
    class="modal-overlay hidden" 
    role="dialog" 
    aria-modal="true" 
    aria-labelledby="modal-title" 
    tabindex="-1"
  >
    <!-- Modal Container -->
    <div class="modal-container">
      <!-- Modal Header -->
      {showHeader && (
        <header class="modal-header">
          <h2 id="modal-title" class="modal-title">{modalTitle}</h2>
          <button 
            type="button" 
            class="modal-close-btn"
            aria-label="Close modal"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="18" y1="6" x2="6" y2="18"/>
              <line x1="6" y1="6" x2="18" y2="18"/>
            </svg>
          </button>
        </header>
      )}
      
      <!-- Modal Content -->
      <main class="modal-content">
        <slot />
      </main>

      <!-- Close button for headerless modal -->
      {!showHeader && (
        <button 
          type="button" 
          class="modal-close-btn modal-close-btn--floating"
          aria-label="Close modal"
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      )}
    </div>
  </div>
</div>

<style>
  @layer modal {
    .fullscreen-modal-wrapper {
      display: inline-block;
    }

    /* Trigger Button */
    .modal-trigger-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .modal-trigger-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .modal-trigger-btn:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.4);
    }

    .modal-trigger-btn .icon {
      flex-shrink: 0;
    }

    /* Modal Overlay - Full screen coverage */
    .fullscreen-modal-wrapper .modal-overlay {
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      right: 0 !important;
      bottom: 0 !important;
      width: 100vw !important;
      height: 100vh !important;
      background: rgba(0, 0, 0, 0.8) !important;
      backdrop-filter: blur(4px);
      z-index: 999999 !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      margin: 0 !important;
      padding: 0 !important;
    }

    .fullscreen-modal-wrapper .modal-overlay.hidden {
      display: none !important;
    }

    /* Modal Container */
    .modal-container {
      position: relative;
      width: 100vw;
      height: 100vh;
      background: white;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      transform: scale(0.95) translateY(20px);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      z-index: 1000000;
    }

    .modal-overlay.active .modal-container {
      transform: scale(1) translateY(0);
    }

    /* Modal Header */
    .modal-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1.5rem 2rem;
      border-bottom: 1px solid #e5e7eb;
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      flex-shrink: 0;
    }

    .modal-title {
      font-size: 1.25rem;
      font-weight: 700;
      color: #1f2937;
      margin: 0;
    }

    .modal-close-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 2.5rem;
      height: 2.5rem;
      background: none;
      border: none;
      border-radius: 6px;
      color: #6b7280;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .modal-close-btn:hover {
      background: #f3f4f6;
      color: #374151;
    }

    .modal-close-btn:focus {
      outline: none;
      background: #f3f4f6;
      box-shadow: 0 0 0 2px #667eea;
    }

    /* Floating close button for headerless modal */
    .modal-close-btn--floating {
      position: absolute;
      top: 1rem;
      right: 1rem;
      width: 3rem;
      height: 3rem;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(8px);
      border-radius: 50%;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 10;
    }

    .modal-close-btn--floating:hover {
      background: rgba(255, 255, 255, 1);
      transform: scale(1.05);
    }

    /* Modal Content */
    .modal-content {
      flex: 1;
      overflow: auto;
      padding: 2rem;
      min-height: 0;
    }

    /* Content padding adjustment for headerless modal */
    .modal-container:not(:has(.modal-header)) .modal-content {
      padding: 4rem 2rem 2rem;
    }

    /* Dark mode support */
    @media (prefers-color-scheme: dark) {
      .modal-container {
        background: #1f2937;
      }

      .modal-header {
        background: linear-gradient(135deg, #374151 0%, #1f2937 100%);
        border-bottom-color: #374151;
      }

      .modal-title {
        color: #f9fafb;
      }

      .modal-close-btn {
        color: #9ca3af;
      }

      .modal-close-btn:hover {
        background: #374151;
        color: #f3f4f6;
      }

      .modal-close-btn:focus {
        background: #374151;
      }

      .modal-close-btn--floating {
        background: rgba(55, 65, 81, 0.9);
        color: #f9fafb;
      }

      .modal-close-btn--floating:hover {
        background: rgba(55, 65, 81, 1);
      }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .modal-header {
        padding: 1rem 1.5rem;
      }

      .modal-title {
        font-size: 1.125rem;
      }

      .modal-content {
        padding: 1.5rem;
      }

      .modal-container:not(:has(.modal-header)) .modal-content {
        padding: 3rem 1.5rem 1.5rem;
      }

      .modal-trigger-btn {
        padding: 0.625rem 1.25rem;
        font-size: 0.8rem;
      }

      .modal-close-btn--floating {
        top: 0.75rem;
        right: 0.75rem;
        width: 2.5rem;
        height: 2.5rem;
      }
    }

    /* Reduced motion support */
    @media (prefers-reduced-motion: reduce) {
      .modal-trigger-btn,
      .modal-overlay,
      .modal-container {
        transition: none;
      }
    }

    /* Focus trap styles */
    .modal-overlay:focus {
      outline: none;
    }

    /* Hide body scroll when modal is active */
    :global(body.modal-open) {
      overflow: hidden;
      padding-right: var(--scrollbar-width, 0);
    }
  }
</style>

<script>
  class FullScreenModal {
    private wrapper: HTMLElement
    private trigger: HTMLButtonElement
    private overlay: HTMLElement
    private lastFocusedElement: HTMLElement | null = null
    private scrollbarWidth: number = 0

    constructor(wrapper: HTMLElement) {
      this.wrapper = wrapper
      this.trigger = wrapper.querySelector('.modal-trigger-btn') as HTMLButtonElement
      this.overlay = wrapper.querySelector('.modal-overlay') as HTMLElement
      
      this.init()
    }

    private init() {
      // Calculate scrollbar width for body scroll compensation
      this.scrollbarWidth = window.innerWidth - document.documentElement.clientWidth

      // Event listeners
      this.trigger.addEventListener('click', () => this.openModal())
      
      // Handle multiple close buttons (header and floating)
      const closeBtns = this.wrapper.querySelectorAll('.modal-close-btn')
      closeBtns.forEach(btn => {
        btn.addEventListener('click', () => this.closeModal())
      })

      this.overlay.addEventListener('click', (e) => {
        if (e.target === this.overlay) this.closeModal()
      })
      this.overlay.addEventListener('keydown', (e) => this.handleKeydown(e))

      // Prevent event bubbling on modal container
      const container = this.overlay.querySelector('.modal-container')
      container?.addEventListener('click', (e) => e.stopPropagation())
    }

    private openModal() {
      this.lastFocusedElement = document.activeElement as HTMLElement
      
      // Add scrollbar width compensation
      document.documentElement.style.setProperty('--scrollbar-width', `${this.scrollbarWidth}px`)
      document.body.classList.add('modal-open')
      
      this.overlay.classList.remove('hidden')
      this.overlay.classList.add('active')
      
      // Focus the modal for accessibility
      requestAnimationFrame(() => {
        this.overlay.focus()
      })
    }

    private closeModal() {
      this.overlay.classList.add('hidden')
      this.overlay.classList.remove('active')
      document.body.classList.remove('modal-open')
      document.documentElement.style.removeProperty('--scrollbar-width')
      
      // Return focus to trigger element
      if (this.lastFocusedElement) {
        this.lastFocusedElement.focus()
      }
    }

    private handleKeydown(e: KeyboardEvent) {
      if (e.key === 'Escape') {
        this.closeModal()
        return
      }

      // Simple focus trap
      if (e.key === 'Tab') {
        const focusableElements = this.overlay.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        ) as NodeListOf<HTMLElement>
        
        const firstFocusable = focusableElements[0]
        const lastFocusable = focusableElements[focusableElements.length - 1]

        if (e.shiftKey && document.activeElement === firstFocusable) {
          e.preventDefault()
          lastFocusable.focus()
        } else if (!e.shiftKey && document.activeElement === lastFocusable) {
          e.preventDefault()
          firstFocusable.focus()
        }
      }
    }
  }

  // Initialize all modal components on the page
  document.addEventListener('DOMContentLoaded', () => {
    const modalWrappers = document.querySelectorAll('.fullscreen-modal-wrapper') as NodeListOf<HTMLElement>
    modalWrappers.forEach(wrapper => new FullScreenModal(wrapper))
  })

  // Handle dynamic content (if modals are added after page load)
  if (typeof window !== 'undefined') {
    ;(window as any).FullScreenModal = FullScreenModal
  }
</script>